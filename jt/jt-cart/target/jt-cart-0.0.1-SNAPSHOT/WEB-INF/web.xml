<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="jt-manage" version="2.5">
	<display-name>jt-cart</display-name>

	
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<!-- spring和SpringMVC的总结
		配置的方式:
		1.通过前端控制器直接扫描全部容器
		2.通过监听器的方式启动spring容器
		
		差别:
		第一种:如果springMVC和spring的配置文件都是通过前端控制器扫描则容器的启动是懒加载的
		只有浏览器发出请求后,前端控制器才会启动spring容器和springMVC
		弊端:如果是大项目,用户访问时,这是后台的容器才会启动,这时用户等待的时间较长,耗费时间主要在等待容器启动
		
		第二种:
		通过监听器的方式启动spring和springMVC,当tomcat启动时监听器就会监听是否需要我们spring容器,如果监听器检测到需要spring容器
		则监听器会在后台启动spring容器,(tomcat启动时spring已经加载完成)
		当用户通过浏览器访问时,首先将请求发给springMVC,springMVC通过spring容器获取具体的对象完成业务调用,用户不需要等待容器启动
	 -->
	<!-- 配置监听器启动spring容器 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:/spring/applicationContext*.xml</param-value>
	</context-param>
	<!-- 1.配置前端控制器 -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		
		
		<!-- 1.1.配置加载SpringMVC.xml -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:/spring/springmvc.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 
			"/"
			1.表示拦截全部的请求 
			2.拦截所有静态资源js/css/image 后期配置放行
			
				 springmvc.xml中配置放行静态资源文件
				<mvc:default-servlet-handler/>
			3.放行.jsp资源
		 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 2.配置全站乱码解决POST乱码 -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>
